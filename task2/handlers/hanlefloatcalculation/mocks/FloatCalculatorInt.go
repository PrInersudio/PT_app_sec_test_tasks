// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// FloatCalculatorInt is an autogenerated mock type for the FloatCalculatorInt type
type FloatCalculatorInt struct {
	mock.Mock
}

// FloatCalculation provides a mock function with given fields: X1, X2, X3, Y1, Y2, Y3, E
func (_m *FloatCalculatorInt) FloatCalculation(X1 decimal.Decimal, X2 decimal.Decimal, X3 decimal.Decimal, Y1 decimal.Decimal, Y2 decimal.Decimal, Y3 decimal.Decimal, E int32) (decimal.Decimal, decimal.Decimal, string, error) {
	ret := _m.Called(X1, X2, X3, Y1, Y2, Y3, E)

	var r0 decimal.Decimal
	var r1 decimal.Decimal
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, int32) (decimal.Decimal, decimal.Decimal, string, error)); ok {
		return rf(X1, X2, X3, Y1, Y2, Y3, E)
	}
	if rf, ok := ret.Get(0).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, int32) decimal.Decimal); ok {
		r0 = rf(X1, X2, X3, Y1, Y2, Y3, E)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, int32) decimal.Decimal); ok {
		r1 = rf(X1, X2, X3, Y1, Y2, Y3, E)
	} else {
		r1 = ret.Get(1).(decimal.Decimal)
	}

	if rf, ok := ret.Get(2).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, int32) string); ok {
		r2 = rf(X1, X2, X3, Y1, Y2, Y3, E)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, int32) error); ok {
		r3 = rf(X1, X2, X3, Y1, Y2, Y3, E)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewFloatCalculatorInt interface {
	mock.TestingT
	Cleanup(func())
}

// NewFloatCalculatorInt creates a new instance of FloatCalculatorInt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFloatCalculatorInt(t mockConstructorTestingTNewFloatCalculatorInt) *FloatCalculatorInt {
	mock := &FloatCalculatorInt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
